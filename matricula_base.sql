--LABORATORIO MATRICULA
-- Modificado por:
-- Josue Ramirez y Diego Babb


CONN system/root; 

CREATE TABLESPACE MATRICULA
DATAFILE 'C:\oraclexe\app\oracle\oradata\XE\MATRICULA.dbf'
SIZE 100M 
ONLINE;

CREATE TEMPORARY TABLESPACE MATRICULA_TEMP
TEMPFILE 'C:\oraclexe\app\oracle\oradata\XE\MATRICULA_TEMP.dbf'
SIZE 12M
AUTOEXTEND ON;

CREATE USER MATRICULA IDENTIFIED BY MATRICULA123
  DEFAULT TABLESPACE MATRICULA
  TEMPORARY TABLESPACE MATRICULA_TEMP;

GRANT DBA TO MATRICULA;

CONN MATRICULA/MATRICULA123;


--TABLAS
CREATE TABLE CARRERA(
ID NUMBER(3),
CODIGO VARCHAR2(5),
NOMBRE VARCHAR2(50),
CONSTRAINTS CARRERA_PK PRIMARY KEY(ID));

CREATE TABLE CICLO(
ID NUMBER(3),
ANIO VARCHAR2(4),
NUMERO NUMBER(1),
FECHA_INICIO DATE,
FECHA_FIN DATE,
CONSTRAINTS CICLO_PK PRIMARY KEY(ID));

CREATE TABLE PROFESOR(
ID NUMBER(3),
CEDULA VARCHAR2(50),
NOMBRE VARCHAR2(50),
TELEFONO VARCHAR2(20),
EMAIL VARCHAR2(50),
CONSTRAINTS PROFESOR_PK PRIMARY KEY(ID));

CREATE TABLE CURSO(
ID NUMBER(3),
CODIGO VARCHAR2(5),
NOMBRE VARCHAR2(50),
CREDITOS NUMBER(1),
HORAS_SEMANALES NUMBER(3),
CARRERA NUMBER(3),
CICLO NUMBER(3),
PROFESOR VARCHAR2(50),
CONSTRAINTS CURSO_PK PRIMARY KEY(ID));

CREATE TABLE USUARIO(
ID NUMBER(3),
CEDULA VARCHAR2(50),
CLAVE VARCHAR2(50),
CONSTRAINTS USUARIOS_PK PRIMARY KEY(ID));


--------------------------------------------------------------------------------------------------------------------
--LLAVES UNICAS

ALTER TABLE CARRERA ADD CONSTRAINT UK_CARRERA_CODIGO UNIQUE(CODIGO);
ALTER TABLE PROFESOR ADD CONSTRAINT UK_PROFESOR_CEDULA UNIQUE(CEDULA);
ALTER TABLE CURSO ADD CONSTRAINT UK_CURSO_CODIGO UNIQUE(CODIGO);
ALTER TABLE USUARIO ADD CONSTRAINT UK_USUARIO_CEDULA UNIQUE(CEDULA);

--------------------------------------------------------------------------------------------------------------------
--LLAVES FOR√ÅNEAS

--TABLA CURSO
ALTER TABLE CURSO ADD CONSTRAINT FK_CURSO_CARRERA
FOREIGN KEY(CARRERA)
REFERENCES CARRERA(ID);

ALTER TABLE CURSO ADD CONSTRAINT FK_CURSO_CICLO
FOREIGN KEY(CICLO)
REFERENCES CICLO(ID);

ALTER TABLE CURSO ADD CONSTRAINT FK_CURSO_PROFESOR
FOREIGN KEY(PROFESOR)
REFERENCES PROFESOR(CEDULA);

--------------------------------------------------------------------------------------------------------------------
-- Datos quemados

INSERT INTO CARRERA(ID, CODIGO, NOMBRE) VALUES(1, 'EIF', 'Ingenieria en Sistemas');

INSERT INTO CICLO(ID, ANIO, NUMERO, FECHA_INICIO, FECHA_FIN) 
VALUES(1, 2020, 1, TO_DATE('2020/02/10', 'yyyy/mm/dd'), TO_DATE('2020/06/10', 'yyyy/mm/dd'));

INSERT INTO CICLO(ID, ANIO, NUMERO, FECHA_INICIO, FECHA_FIN) 
VALUES(2, 2020, 2, TO_DATE('2020/07/10', 'yyyy/mm/dd'), TO_DATE('2020/11/10', 'yyyy/mm/dd'));

INSERT INTO USUARIO(ID, CEDULA, CLAVE) VALUES (1, '402400313', '11111111');
INSERT INTO USUARIO(ID, CEDULA, CLAVE) VALUES (2, '116960863', '11111111');


--------------------------------------------------------------------------------------------------------------------
-- SEQUENCEs
CREATE SEQUENCE SEC_PROFESOR  START WITH 1    INCREMENT BY 1;
CREATE SEQUENCE SEC_CURSO     START WITH 11   INCREMENT BY 1;


--------------------------------------------------------------------------------------------------------------------
-- Procedimientos almacenados

CREATE OR REPLACE PACKAGE TYPES

AS

TYPE REF_CURSOR IS REF CURSOR;

END;

/
--------------------------------------------------------------------------------------------------------------------
-- Profesor

--INSERTAR
CREATE OR REPLACE PROCEDURE INSERTAR_PROFESOR(CEDULA IN PROFESOR.CEDULA%TYPE,NOMBRE IN PROFESOR.NOMBRE%TYPE,TELEFONO IN PROFESOR.TELEFONO%TYPE,EMAIL IN PROFESOR.EMAIL%TYPE)

AS

BEGIN

INSERT INTO PROFESOR VALUES(SEC_PROFESOR.nextval, CEDULA, NOMBRE, TELEFONO, EMAIL);
COMMIT;

END;

/


--MODIFICAR
CREATE OR REPLACE PROCEDURE MODIFICAR_PROFESOR(P_CEDULA IN PROFESOR.CEDULA%TYPE,P_NOMBRE IN PROFESOR.NOMBRE%TYPE,P_TELEFONO IN PROFESOR.TELEFONO%TYPE,P_EMAIL IN PROFESOR.EMAIL%TYPE)

AS

BEGIN

UPDATE PROFESOR SET NOMBRE = P_NOMBRE, TELEFONO = P_TELEFONO, EMAIL = P_EMAIL WHERE CEDULA = P_CEDULA;
COMMIT;

END;

/

--BUSCAR (UN ELEMENTO)

CREATE OR REPLACE FUNCTION BUSCAR_PROFESOR(P_CEDULA IN PROFESOR.CEDULA%TYPE)

RETURN TYPES.REF_CURSOR 

AS 

CURSOR_PROFESOR TYPES.REF_CURSOR; 

BEGIN 

OPEN CURSOR_PROFESOR FOR 

SELECT CEDULA, NOMBRE, TELEFONO, EMAIL FROM PROFESOR WHERE CEDULA = P_CEDULA; 

RETURN CURSOR_PROFESOR; 

END;

/

--LISTAR (TODOS LOS ELEMENTOS)

CREATE OR REPLACE FUNCTION LISTAR_PROFESOR

RETURN TYPES.REF_CURSOR 

AS 

CURSOR_PROFESOR TYPES.REF_CURSOR; 

BEGIN 

OPEN CURSOR_PROFESOR FOR 

SELECT CEDULA, NOMBRE, TELEFONO, EMAIL FROM PROFESOR; 

RETURN CURSOR_PROFESOR; 

END;

/


--BORRAR
CREATE OR REPLACE PROCEDURE ELIMINAR_PROFESOR(P_CEDULA IN PROFESOR.CEDULA%TYPE)

AS

BEGIN

DELETE FROM PROFESOR WHERE CEDULA = P_CEDULA; 
COMMIT;

END;

/


--TABLA CURSO--------------------------------------------------------------------------------------------------------------------

--INSERTAR
CREATE OR REPLACE PROCEDURE INSERTAR_CURSO(CODIGO IN CURSO.CODIGO%TYPE, NOMBRE IN CURSO.NOMBRE%TYPE, CREDITOS IN CURSO.CREDITOS%TYPE, HORAS_SEMANALES IN CURSO.HORAS_SEMANALES%TYPE, PROFESOR IN CURSO.PROFESOR%TYPE)

AS

BEGIN

INSERT INTO CURSO VALUES(SEC_CURSO.nextval, CODIGO, NOMBRE, CREDITOS, HORAS_SEMANALES, 1, 1, PROFESOR);
COMMIT;

END;

/


--MODIFICAR
CREATE OR REPLACE PROCEDURE MODIFICAR_CURSO(P_CODIGO IN CURSO.CODIGO%TYPE, P_NOMBRE IN CURSO.NOMBRE%TYPE, P_CREDITOS IN CURSO.CREDITOS%TYPE, P_HORAS_SEMANALES IN CURSO.HORAS_SEMANALES%TYPE, P_PROFESOR IN CURSO.PROFESOR%TYPE)

AS

BEGIN

UPDATE CURSO SET NOMBRE = P_NOMBRE, CREDITOS = P_CREDITOS, HORAS_SEMANALES = P_HORAS_SEMANALES, PROFESOR = P_PROFESOR WHERE CODIGO = P_CODIGO;
COMMIT;

END;

/



--BUSCAR (UN ELEMENTO)

CREATE OR REPLACE FUNCTION BUSCAR_CURSO(P_CODIGO IN CURSO.CODIGO%TYPE)

RETURN TYPES.REF_CURSOR 

AS 

CURSOR_CURSO TYPES.REF_CURSOR; 

BEGIN 

OPEN CURSOR_CURSO FOR 

SELECT CODIGO, NOMBRE, CREDITOS, HORAS_SEMANALES, PROFESOR, CICLO, CARRERA FROM CURSO WHERE CODIGO = P_CODIGO; 

RETURN CURSOR_CURSO; 

END;

/



--LISTAR (TODOS LOS ELEMENTOS)

CREATE OR REPLACE FUNCTION LISTAR_CURSO

RETURN TYPES.REF_CURSOR 

AS 

CURSOR_CURSO TYPES.REF_CURSOR; 

BEGIN 

OPEN CURSOR_CURSO FOR 

SELECT CODIGO, NOMBRE, CREDITOS, HORAS_SEMANALES, PROFESOR, CICLO, CARRERA FROM CURSO;

RETURN CURSOR_CURSO; 

END;

/


--BORRAR
CREATE OR REPLACE PROCEDURE ELIMINAR_CURSO(P_CODIGO IN CURSO.CODIGO%TYPE)

AS

BEGIN

DELETE FROM CURSO WHERE CODIGO = P_CODIGO;
COMMIT;

END;

/

-- fin